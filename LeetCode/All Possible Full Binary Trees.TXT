//https://leetcode.com/problems/all-possible-full-binary-trees/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
        // root of (sub)tree / return List
        n -= 1;
        List<TreeNode> trees = new ArrayList<>();
        // return when it is edge.      
        if(n == 0) {
            trees.add(new TreeNode(0));
            return trees;
        }
  
        // children of root
        for (int i = 1; i <= n-1; i+=2) {
            List<TreeNode> left = allPossibleFBT(i);
            List<TreeNode> right = allPossibleFBT(n-i);
            for (TreeNode l:left) {
                for (TreeNode r:right) {
                    TreeNode newRoot = new TreeNode(0);
                    newRoot.left = l;
                    newRoot.right = r;
                    trees.add(newRoot);
                }
            }
        }
        return trees;
    }
}