// https://www.acmicpc.net/problem/2667
import java.io.BufferedReader;
import java.io.IOException;

import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class Main {
  static int N,count=0;
  static int[][] map;
  static boolean[][] visited;
  static int[] dx = {0,0,1,-1};
  static int[] dy = {1,-1,0,0};


  public static void main(String[] args) throws IOException {

    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    N = Integer.parseInt(br.readLine());  //단지수 입력
    map = new int[N][N];
    visited = new boolean[N][N];

    // 배열 입력받기
    for(int i=0;i<N;i++){
      String[] s = br.readLine().split("");
      for(int j=0;j<N;j++){
        map[i][j] = Integer.parseInt(s[j]);
      }
    }

    List<Integer> list = new ArrayList<>();
    for(int i=0;i<N;i++){
      for(int j=0;j<N;j++){
        if(map[i][j]==1 && !visited[i][j]){ // 집이 있고 아직 그곳을 방문하지 않았다면
          count=1;
          dfs(i,j);
          list.add(count);
        }
      }
    }
    System.out.println(list.size());
    list.stream().sorted().forEach(System.out::println);
  }

  private static void dfs(int a, int b) {

    // 1. true로 방문처리
    visited[a][b] = true;

    // 2. 상,하,좌,우 이동 
    for(int i=0;i<4;i++){
      int x = a + dx[i];
      int y = b + dy[i];

    // 3. x,y범위내에 존재하고 아직 방문하지 않은 집일 경우
      if(x>=0 && x<N && y>=0 && y<N){
        if(map[x][y] == 1 && !visited[x][y]){
          map[x][y]=0;	// 1(집)의 개수를 count하고 있으므로, 들른 집은 0으로 바꿔주어, 중복을 피해야함
          count++;
          dfs(x,y);
        }
      }
    }
  }
}