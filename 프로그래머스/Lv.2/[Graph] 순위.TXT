/*
정확하게 순위를 매길 수 있는 경우
1. n-1번 모두 경기를 한 경우
2. b선수 > a선수 && a선수 > c선수 이면 b선수 > c선수 -> 3중 for-loop

💡 알고리즘
1. 2차 배열을 이용하여 이긴선수는 1, 진 선수는 -1 대입  -> results 결과 이용
2. 3중 for-loop을 통해 이긴선수는 1, 진 선수는 -1 대입 -> b선수 > a선수 && a선수 > c선수 이면 b선수 > c선수 논리 이용
3. 1또는 -1인 경우 count를 +1씩 하고 count == n-1 일 경우, 해당 선수의 순위를 알 수 있으므로 answer++


💡 시간복잡도
1<=n<=100
1<=results.length<=4500

1부터 n까지 반복하는 for-loop이 3개 중첩되어있으므로
시간복잡도: O(n^3) -> 최악의 경우 100^3 = 1,000,000번 즉, 백만 번 연산.

최대 1억번 연산까지가 커트라인이므로 무난히 통과한다.
*/
class Solution {
    public int solution(int n, int[][] results) {
        int answer = 0;
        int[][] rank = new int[n+1][n+1];
        
        for(int[] r:results){
            rank[r[0]][r[1]] = 1; // 이김   rank[4][3] = 1
            rank[r[1]][r[0]] = -1; // 짐    rank[3][4] = -1
        }
        
        for(int k=1;k<=n;k++){
            for(int i=1;i<=n;i++){
                for(int j=1;j<=n;j++){
                    if(rank[i][k] == 1 && rank[k][j] == 1){
                        rank[i][j] = 1;     // 이김
                        rank[j][i] = -1;    // 짐
                    }
                }
            }
        }
        
        // 순위 알 수 있는지 비교순위 알 수 있는지 비교
        for(int i=1;i<=n;i++){
            int count=0;
            for(int j=1;j<=n;j++){
                if(rank[i][j] != 0){
                    count++;
                }
            }
            if(count == n-1){
                answer++;
            }
        }
        
        return answer;
    }
}