배열을 만들 때 연산 결과, 중복된 정수가 나오는 경우
: 중복을 허용하지 않는 HashSet 사용

<HashSet의 특징>
1. 순서대로 입력되지 않고, 일정하게 유지되지 않음
2.  null 요소 허용
3. 중복 허용 X
---------------------------------------------------------
<중복을 걸러내는 과정>
HashSet은 객체를 저장하기 전에 먼저 객체의 hashCode()메소드를 호출해서 해시 코드를 얻어낸 다음 
저장되어 있는 객체들의 해시 코드와 비교한 뒤, 같은 해시 코드가 있다면 
다시 equals() 메소드로 두 객체를 비교해서 true가 나오면 동일한 객체로 판단하고 중복 저장을 하지 않습니다. 
문자열을 HashSet에 저장할 경우, 같은 문자열을 갖는 String객체는 동일한 객체로 간주되고 
다른 문자열을 갖는 String객체는 다른 객체로 간주되는데, 그 이유는 String클래스가 hashCode()와 equals() 메소드를 재정의해서 
같은 문자열일 경우 hashCode()의 리턴 값을 같게, equals()의 리턴 값은 true가 나오도록 했기 때문입니다.

<HashSet 변수 선언>
HashSet<데이터타입> 변수명 = new HashSet<데이터타입>()
HashSet<E>의 경우 제너릭은 클래스 타입이므로, int 와 같은 기본 자료형을 넣을 경우, 오류 발생.
Integer와 같은 Wrapper Class만 가능.

그래서 int타입의 배열로 return을 해야 할 경우 아래와 같이 int형 배열에 일일이 넣어줘야 함.
count : HashSet 배열
 for(Integer count : counts){
            answer[index] = count;
            index++;
        }
