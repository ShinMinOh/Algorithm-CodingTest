//https://school.programmers.co.kr/learn/courses/30/lessons/86971
import java.util.LinkedList;
import java.util.Queue;
class Solution {
    int[][] arr;
    public int solution(int n, int[][] wires) {
        int answer = Integer.MAX_VALUE;
 
        // 인접관계 행렬 만들기
        arr = new int[n+1][n+1];
        for(int i=0;i<wires.length;i++){
            arr[wires[i][0]][wires[i][1]] = 1;  //1과3 연결관계 1로 설정
            arr[wires[i][1]][wires[i][0]] = 1;  //3과1 연결관계 1로 설정
        }
        
        // 선 하나씩 끊으면서 bfs 탐색
        for(int i=0;i<wires.length;i++){
            int left = wires[i][0];
            int right = wires[i][1];
            
            // 선 끊기
            arr[left][right] = 0;
            arr[right][left] = 0;
            
            // bfs
            answer = Math.min(answer, bfs(left,n));
                
            // 끊었던 선 복구
            arr[left][right] = 1;
            arr[right][left] = 1;
        }
        
        return answer;
    }
    
    public int bfs(int left, int n){
        int cnt = 1;    // 기본으로 자기자신인 송전탑이 있으므로 1부터 시작
        boolean[] visited = new boolean[n+1];
        Queue<Integer> queue = new LinkedList<>();
        
        queue.add(left);
        
        while(!queue.isEmpty()){
            int temp = queue.poll();
            visited[temp] = true;
            for(int i=1;i<n+1;i++){
                if(arr[temp][i] == 1 && !visited[i]){
                    queue.add(i);   // 연결되어있는 다음 노드로 넘어가기 위해 queue에 추가
                    cnt++;          // 연결된 노드 하나 찾았으므로 +1
                }
            }
        }
        
        return Math.abs(cnt-(n-cnt));
    }
}