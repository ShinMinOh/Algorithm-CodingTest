//https://www.acmicpc.net/problem/10026
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
  static int N;
  static String S;
  static char[][] arr;
  static boolean[][] visits;
  static int[] dx = {0, 0, -1, 1};  // 좌,상,하,우
  static int[] dy = {1, -1, 0, 0};
  public static void main(String[] args) throws IOException {
    // 입력 & 변수선언
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    N = Integer.parseInt(br.readLine());
    arr = new char[N + 1][N + 1];
    visits = new boolean[N + 1][N + 1];

    // 배열에 알파벳 삽입
    for (int i = 0; i < N; i++) {
      S = br.readLine(); // RRRBB
      for (int j = 0; j < N; j++) {
        arr[i][j] = S.charAt(j); // R R R B B
      }
    }

    // 정상인 경우
    int cnt = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (!visits[i][j]) {
          dfs(i, j);
          cnt++;  //더이상 인접한 노드에 같은 색이 없을경우 dfs를 빠져 나와서 cnt +1함.
        }
      }
    }
    int normal_cnt = cnt;

    // 다음 사용위해 초기화
    cnt = 0;  
    visits = new boolean[N + 1][N + 1];

    // 비정상인 경우
    // G를 R로 바꿔주고 돌린다.
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (arr[i][j] == 'G') {
          arr[i][j] = 'R'; // G를 R로 바꿔준다.
        }
      }
    }
    //
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (!visits[i][j]) {
          dfs(i, j);
          cnt++;
        }
      }
    }
    int abnormal_cnt = cnt;
    System.out.println(normal_cnt + " " + abnormal_cnt);

  }

  public static void dfs(int x, int y) {
    // 1. 현재 노드를 방문처리
    visits[x][y] = true;

    // 2. 방향을 따져야 하는 경우 4방향 모두 봐야 하므로 4번 반복
    char tmp_char = arr[x][y]; // R
    for (int i = 0; i < 4; i++) {
      int new_x = x + dx[i];
      int new_y = y + dy[i];

      // 3. 범위를 벗어 나는 경우 skip
      if (new_x < 0 || new_y < 0 || new_x > N || new_y > N) {
        continue;
      }

      // 4. 새로운 노드가 아직 방문하지 않고, 이전 노드와 같은 색이면 재귀적으로 방문
      if (!visits[new_x][new_y] && arr[new_x][new_y] == tmp_char) {
        dfs(new_x, new_y);
      }
    }
  }

}

