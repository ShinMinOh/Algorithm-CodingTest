//https://school.programmers.co.kr/learn/courses/30/lessons/169199
import java.util.*;
class Solution {
    int[] X = {0,0,-1,1};
    int[] Y = {1,-1,0,0};
    private int[] findPosition(char find, String[] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length();j++){
                if(board[i].charAt(j) == find){
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }
    public int solution(String[] board) {
        int start[] = findPosition('R',board);  // start[0] : 'R'의 x좌표, start[1] : 'R'의 y좌표 
        
        int count = bfs('G', start, board);
        return count;
    }
    
    private int bfs(char find, int[] start, String[]board){
        int answer = Integer.MAX_VALUE;

        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(start[0], start[1], 0));
        
        boolean[][] visited = new boolean[board.length][board[0].length()];
        visited[start[0]][start[1]] = true;         // Queue에서 꺼내온 좌표 방문 처리
        
        while(!q.isEmpty()){
            Node cur = q.poll();
            
            if(answer <= cur.count){    // 지금까지 최소값만 저장되어있는 answer값보다 count가 크면 최소값 조건에 만족하지 않으므로 skip
                continue;
            }
            
            if(board[cur.x].charAt(cur.y) == find){
                answer = Math.min(answer, cur.count);
            }
            
            for(int i=0;i<4;i++){ 
                
                int x = cur.x + X[i];   // 방향을 정해주고
                int y = cur.y + Y[i];   // 방향을 정해주고
                
                while(x>=0 && y>=0 && x<board.length && y<board[0].length() && board[x].charAt(y) != 'D'){
                    x += X[i];
                    y += Y[i];
                }
                
                x -= X[i];  //위의 코드로 현재위치와 'D'가 겹쳐져 있는 상태이므로 한칸 전으로 이동
                y -= Y[i];
                if(visited[x][y]){  // 만약 방문처리 되어있는 경우 continue
                    continue;
                }
                
                visited[x][y] = true; // 방문처리 되어있지 않은 경우 true로 방문처리 해주고
                
                q.offer(new Node(x, y, cur.count+1));  // 위의 while문 반복
            }
        }
        
        return answer == Integer.MAX_VALUE ? -1 : answer;
    }
}
class Node{
    int x;
    int y;
    int count;
    public Node(int x, int y, int count){
        this.x = x;
        this.y = y;
        this.count = count;
    }
}