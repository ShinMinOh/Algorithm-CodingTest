//https://school.programmers.co.kr/learn/courses/30/lessons/49189
import java.util.*;
class Solution {
     ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    public int solution(int n, int[][] edge) {
        int answer = 0;
        
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] i:edge){  //양방향이기 때문에 v와 w 바꿔서도 넣어주기
            int v = i[0];   
            int w = i[1];        
            graph.get(v).add(w);   //v인덱스에 w대입.
            graph.get(w).add(v);
        }
        
        boolean[] visited = new boolean[n+1];
        return bfs(graph,visited);
    }
    
    public static int bfs(ArrayList<ArrayList<Integer>> graph, boolean[] visited){
        Queue<int[]> queue = new LinkedList<>();
        int answer = 0;
        
        queue.add(new int[] {1,0}); //노드,1번 노드로부터 거리(depth)
        visited[1]=true;
        int maxDepth=0;
        
        while(!queue.isEmpty()){
            int[] arr = queue.poll();
            int v = arr[0];
            int depth = arr[1];
            
            if(depth == maxDepth) answer++;     
            else if(maxDepth < depth){
                maxDepth = depth;
                answer = 1;    // 가장 멀리 떨어진 Node 발견해서 anwer =1로 셋팅.  
                               // 이후 이와 똑같이 최대 거리가 나올경우 위 if문을 통해 answer++     
            }
            
            for(int i=0;i<graph.get(v).size();i++){
                int w = graph.get(v).get(i);    // 인접정점중 하나 가져오기
                if(!visited[w]){
                    queue.add(new int[] {w, depth+1});
                    visited[w]=true;
                }
            }
        }
    return answer;
}
}